#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>

#include "std_msgs/Float32.h"
#include "std_msgs/Float64.h"
#include "std_msgs/Int32.h"
#include "std_msgs/String.h"
#include <nav_msgs/Odometry.h>
#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/Vector3.h>
#include "geometry_msgs/PoseWithCovarianceStamped.h"
#include "geometry_msgs/PoseStamped.h"
#include "actionlib_msgs/GoalStatusArray.h"

#include <std_msgs/UInt8MultiArray.h>
#include <math.h>

float data_lms[181],check_data[5],check = 0;//, check_data_front[5];
int flag = 0, pos = 0, check_pos = 0, check_data_pos[5], pos_front = 0;
bool flag_state = true, flag_info = true;

//Publishes
ros::Publisher pub_stop_flag;

void ScanCallBack(const sensor_msgs::LaserScan::ConstPtr& scan){
     //scan->ranges[]
	 if (flag_state == true){
	     flag_info = false;
	     for(int i = 0; i < 181; i++){
	    	 data_lms[i] = scan->ranges[i];
	    	 //ROS_INFO("Data: [%f]", scan->ranges[i]);
	    	 //ROS_INFO("Data i: [%d]", i);
	     }
	     pos = 0;
	     pos_front = 0;
	     std::fill_n(check_data, 5, 100);
	     //======================================
	     for (int j = 0; j<5; j++){
	         for(int k = 0; k < 181; k++){
	        	 if (check_data[pos] >= data_lms[k]){
	        		check_data[pos] = data_lms[k];
	        		check_data_pos[pos] = k;
	            	check_pos = k;
	        	 }
	         }
	         data_lms[check_pos] = 100;
	    	 pos++;
	     }
	     //======================================
	     for (int l = 0; l<5; l++){
	    	 check = check + check_data[l];
	    	 if ((check_data_pos[l] <= 110)&&(check_data_pos[l] >= 70)) pos_front++;

	    	 //ROS_INFO("Data: [%f]", check_data[l]);
	    	 //ROS_INFO("Data i: [%d]", check_data_pos[l]);
	     }
	     //ROS_INFO("===================================");
	     check = check/5;
	     //======================================
		std_msgs::Int32 msg;
		if (pos_front == 5){
			 ROS_INFO("Front: [%d]", pos_front);
			 if ((check > 2.5)&&(check <= 3.5)){
			 	msg.data = 1802;
			 	pub_stop_flag.publish(msg);
				ROS_INFO("WARNING ZONE 1");
			 }
			 else if ((check > 1.2)&&(check <= 2.5)){
			 	msg.data = 1402;
			 	pub_stop_flag.publish(msg);
				ROS_INFO("WARNING ZONE 2");
			 }
			 else if (check <= 1.2){
			 	msg.data = 1002;
			 	pub_stop_flag.publish(msg);
				ROS_INFO("STOP ROBOT");
			 }
		 }
		else if (pos_front != 5){
			 ROS_INFO("Front: [%d]", pos_front);
			 if ((check > 1.5)&&(check <= 2)){
			 	msg.data = 1802;
			 	pub_stop_flag.publish(msg);
				ROS_INFO("WARNING ZONE 1");
			 }
			 else if ((check > 1.0)&&(check <= 1.5)){
			 	msg.data = 1402;
			 	pub_stop_flag.publish(msg);
				ROS_INFO("WARNING ZONE 2");			 
			}
			 else if (check <= 1.0){
			 	msg.data = 1002;
			 	pub_stop_flag.publish(msg);
				ROS_INFO("STOP ROBOT");
			 }
		 }
	 }
	 else if (flag_state == false){
		 if (flag_info == false){
			 ROS_INFO("PAUSE SAFETY NODE");
			 flag_info = true;
		 }
	 }
}

void LineDetection_Callback(const std_msgs::Int32& msg){ //on
    if((int)msg.data==3203||(int)msg.data==3204){
    	flag_state = true;
        //ROS_INFO("FLAG OFF");
    }
}

void LineDetectionCtrl_Callback(const std_msgs::Int32& msg){ //tat
    if((int)msg.data==1203||(int)msg.data==1204){
    	flag_state = false;
	//ROS_INFO("FLAG ON");
    }
    else if ((int)msg.data==1200) 
    	flag_state = true;
}

int main(int argc, char** argv){
	ros::init(argc, argv,"safety_rule");
	ros::NodeHandle nh;
	ros::Subscriber  sub_laserscan = nh.subscribe("/scan",1,ScanCallBack);					//get laser data
	ros::Subscriber  sub_LineDetectionCtrl_Node = nh.subscribe("linedetectionctrl",1,LineDetectionCtrl_Callback);
	ros::Subscriber  sub_LineDetection_Node = nh.subscribe("linedetectioncallback",1,LineDetection_Callback);
	
	pub_stop_flag=nh.advertise<std_msgs::Int32>("stop_flag",10);
	ros::Rate loop_rate(50);
	while(ros::ok())
	{
           ros::spinOnce();
	}
	
}
